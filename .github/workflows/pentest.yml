name: Juice Shop Pentest

on:
  workflow_dispatch:
  push:
    branches: [ master ]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    env:
      APP_URL: http://localhost:3000
      ZAP_DIR: ${{ runner.temp }}/owasp-zap

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci
      working-directory: .

    - name: Start Juice Shop
      run: |
        npm start &                     # start in background
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        for i in {1..60}; do
          if curl -fsS "$APP_URL" >/dev/null; then break; fi
          sleep 2
        done
      working-directory: .

    - name: Install Java (required for ZAP)
      run: sudo apt-get update && sudo apt-get install -y openjdk-11-jre-headless

    - name: Install OWASP ZAP (cli)
      run: |
        mkdir -p "$ZAP_DIR"
        cd "$ZAP_DIR"
        # download a stable ZAP bundle; adjust VERSION if needed
        ZAP_VERSION=2.12.0
        ZAP_TGZ="ZAP_${ZAP_VERSION}_Linux.tar.gz"
        curl -sSL "https://github.com/zaproxy/zaproxy/releases/download/v${ZAP_VERSION}/${ZAP_TGZ}" -o "${ZAP_TGZ}"
        tar -xzf "${ZAP_TGZ}"
        ls -la

    - name: Run ZAP baseline scan (native)
      run: |
        mkdir -p zap-reports
        "$ZAP_DIR"/zaproxy-"$ZAP_VERSION"/zap.sh -daemon -host 127.0.0.1 -port 8081 -config api.disablekey=true &
        # wait for ZAP
        for i in {1..30}; do
          if curl -sS http://127.0.0.1:8081 >/dev/null 2>&1; then break; fi
          sleep 1
        done
        # run baseline via the bundled scripts (adjust path if different)
        "$ZAP_DIR"/zaproxy-"$ZAP_VERSION"/zap-baseline.py -t "$APP_URL" -r zap-reports/zap-report.html -J zap-reports/zap-report.json || true
      env:
        ZAP_HOME: ${{ runner.temp }}/owasp-zap

    - name: Upload ZAP reports
      uses: actions/upload-artifact@v4
      with:
        name: zap-reports
        path: zap-reports/

    - name: Fail on high/medium alerts
      run: |
        if jq -e '.site[0].alerts[] | select(.risk=="High" or .risk=="Medium")' zap-reports/zap-report.json >/dev/null 2>&1; then
          echo "Found High/Medium alerts"; exit 1
        else
          echo "No High/Medium alerts"
        fi

    - name: Cleanup
      if: always()
      run: |
        pkill -f "node" || true
        pkill -f zap || true